name: build

on:
  workflow_dispatch:
  push:
    branches: 
      - main
    paths:
      - '**'
      - '!flake.nix'
      - '!flake.lock'
      - '!deps.json'
  pull_request:

env:
  version: "1.0.${{ github.run_number }}${{ github.run_attempt }}"
  package_name: ProcessTracker
  rpm_arch: x86_64
  rpm_release: 1

jobs:
  build:
    strategy:
      matrix:
        build_runtime: 
          - linux-x64
          - win-x64
    
    runs-on: ubuntu-latest
    permissions:
      checks: write
      contents: write
      
    env:
      build_configuration: Release
      build_framework: net9.0
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9
      
    - name: dotnet restore
      run: dotnet restore

    - name: dotnet build
      run: dotnet build
      
    - name: dotnet publish
      run: dotnet publish ProcessTracker --configuration ${{ env.build_configuration }} --runtime ${{ matrix.build_runtime }} --framework ${{ env.build_framework }} --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=false -p:PublishReadyToRun=false -p:Version=${{ env.version }} -p:PackageVersion=${{ env.version }} --output publish

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.build_runtime }}
        path: ${{ github.workspace }}/publish

    - name: dotnet test
      run: dotnet test --configuration ${{ env.build_configuration }} --framework ${{ env.build_framework }} --verbosity normal --logger "trx;LogFileName=TestResults.trx"
        
    # - name: Publish Unit Test Results
    #   uses: dorny/test-reporter@v1
    #   with:
    #     name: Unit Test Results
    #     path: Tests/**/TestResults.trx
    #     reporter: dotnet-trx

  win:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create folder structure
      run: |
        cd "${{ github.workspace }}"
        mkdir -p build
        mkdir -p publish

    - name: Get artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-win-x64
        path: ${{ github.workspace }}/build

    - name: Create zip
      run: |
        cd "${{ github.workspace }}/build"
        find ./ -name "*.pdb" -type f -delete
        zip -r ../publish/${{ env.package_name }}_${{ env.version }}_win-x64.zip ./*

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: win
        path: ${{ github.workspace }}/publish/

  tarball:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create folder structure
      run: |
        cd "${{ github.workspace }}"
        mkdir -p build
        mkdir -p publish

    - name: Get artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-linux-x64
        path: ${{ github.workspace }}/build

    - name: Set execute permissoins
      run: |
        cd "${{ github.workspace }}/build/"
        chmod +x processtrackercli

    - name: Create tarball
      run: |
        cd "${{ github.workspace }}/build/"
        find . -name "*.pdb" -type f -delete
        tar -czvf ../publish/${{ env.package_name }}_${{ env.version }}_linux-x64.tar.gz *

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: tarball
        path: ${{ github.workspace }}/publish/

  release:
    if: ${{ github.event_name != 'pull_request'  && github.ref_name == 'main' }}
    runs-on: ubuntu-latest
    needs: [win,tarball]
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v5

    - name: Get win
      uses: actions/download-artifact@v4
      with:
        name: win
        path: ${{ github.workspace }}/publish

    - name: Get tarball
      uses: actions/download-artifact@v4
      with:
        name: tarball
        path: ${{ github.workspace }}/publish

    - name: Create release
      uses: actions/github-script@v7
      id: create-release
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const {data: newRelease} = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Process Tracker ${{ env.version  }}',
            tag_name: '${{ env.version  }}',
            generate_release_notes: true,
            draft: false,
            prerelease: false
          });
          console.log(`Release has been created with id ${newRelease.id}: ${newRelease.html_url}`)
          core.setOutput("url", newRelease.html_url)
          core.setOutput("id", newRelease.id)
          
    - name: Upload Release Assets
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs').promises;
          const path = require('path');

          const files = [
            path.join('${{ github.workspace }}', 'publish', '${{ env.package_name }}_${{ env.version }}_win-x64.zip'),
            path.join('${{ github.workspace }}', 'publish', '${{ env.package_name }}_${{ env.version }}_linux-x64.tar.gz'),
          ];

          // Loop through the array and upload each file
          for (const file of files) {
            console.log(`Uploading file ${file}`);
            const data = await fs.readFile(file);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create-release.outputs.id }},
              data,
              name: path.basename(file)
            });
          }